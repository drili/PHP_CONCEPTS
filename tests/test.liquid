<script>
    /**********************
    * DATALAYER ARCHITECTURE: SHOPIFY 
    
    * EXTERNAL DEPENDENCIES:
    * jQuery
    * jQuery Cookie Plugin v1.4.1 - https://github.com/carhartl/jquery-cookie
    * cartjs - https://github.com/discolabs/cartjs
    
    * DataLayer Architecture: Shopify v1.2
    * COPYRIGHT 2021
    * LICENSES: MIT ( https://opensource.org/licenses/MIT )
    */
    
    /**********************
    * PRELOADS 
    * load jquery if it doesn't exist
    ***********************/ 
    
    if(!window.jQuery){
        var jqueryScript = document.createElement('script');
        jqueryScript.setAttribute('src','https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js'); 
        document.head.appendChild(jqueryScript); 
    }
    
    __DL__jQueryinterval = setInterval(function(){
        // wait for jQuery to load & run script after jQuery has loaded
        if(window.jQuery){
            // search parameters
            getURLParams = function(name, url){
                if (!url) url = window.location.href;
                name = name.replace(/[\[\]]/g, "\\$&");
                var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
                results = regex.exec(url);
                if (!results) return null;
                if (!results[2]) return '';
                return decodeURIComponent(results[2].replace(/\+/g, " "));
            };
            
            /**********************
            * DYNAMIC DEPENDENCIES
            ***********************/
            
            __DL__ = {
                dynamicCart: true,  // if cart is dynamic (meaning no refresh on cart add) set to true
                debug: true, // if true, console messages will be displayed
                cart: null,
                wishlist: null,
                removeCart: null
            };
            
            customBindings = {
                cartTriggers: [],
                viewCart: [],
                removeCartTrigger: [],
                cartVisableSelector: [],
                promoSubscriptionsSelectors: [],
                promoSuccess: [],
                ctaSelectors: [],
                newsletterSelectors: [],
                newsletterSuccess: [],
                searchPage: [],
                wishlistSelector: [],
                removeWishlist: [],
                wishlistPage: [],
                searchTermQuery: [getURLParams('q')], // replace var with correct query
            };
            
            /* DO NOT EDIT */
            defaultBindings = {
                cartTriggers: ['form[action="/cart/add"] [type="submit"],.add-to-cart,.cart-btn'],
                viewCart: ['form[action="/cart"],.my-cart,.trigger-cart,#mobileCart'],
                removeCartTrigger: ['[href*="/cart/change"]'],
                cartVisableSelector: ['.inlinecart.is-active,.inline-cart.is-active'],
                promoSubscriptionsSelectors: [],
                promoSuccess: [],
                ctaSelectors: [],
                newsletterSelectors: ['input.contact_email'],
                newsletterSuccess: ['.success_message'],
                searchPage: ['search'],
                wishlistSelector: [],
                removeWishlist: [],
                wishlistPage: []
            };
            
            // stitch bindings
            objectArray = customBindings;
            outputObject = __DL__;
            
            applyBindings = function(objectArray, outputObject){
                for (var x in objectArray) {  
                    var key = x;
                    var objs = objectArray[x]; 
                    values = [];    
                    if(objs.length > 0){    
                        values.push(objs);
                        if(key in outputObject){              
                            values.push(outputObject[key]); 
                            outputObject[key] = values.join(", "); 
                        }else{        
                            outputObject[key] = values.join(", ");
                        }   
                    }  
                }
            };
            
            applyBindings(customBindings, __DL__);
            applyBindings(defaultBindings, __DL__);
            
            /**********************
            * PREREQUISITE LIBRARIES 
            ***********************/
            
            clearInterval(__DL__jQueryinterval);
            
            // jquery-cookies.js
            if(typeof $.cookie!==undefined){(function(a){if(typeof define==='function'&&define.amd){define(['jquery'],a)}else if(typeof exports==='object'){module.exports=a(require('jquery'))}else{a(jQuery)}}(function($){var g=/\+/g;function encode(s){return h.raw?s:encodeURIComponent(s)}function decode(s){return h.raw?s:decodeURIComponent(s)}function stringifyCookieValue(a){return encode(h.json?JSON.stringify(a):String(a))}function parseCookieValue(s){if(s.indexOf('"')===0){s=s.slice(1,-1).replace(/\\"/g,'"').replace(/\\\\/g,'\\')}try{s=decodeURIComponent(s.replace(g,' '));return h.json?JSON.parse(s):s}catch(e){}}function read(s,a){var b=h.raw?s:parseCookieValue(s);return $.isFunction(a)?a(b):b}var h=$.cookie=function(a,b,c){if(arguments.length>1&&!$.isFunction(b)){c=$.extend({},h.defaults,c);if(typeof c.expires==='number'){var d=c.expires,t=c.expires=new Date();t.setMilliseconds(t.getMilliseconds()+d*864e+5)}return(document.cookie=[encode(a),'=',stringifyCookieValue(b),c.expires?'; expires='+c.expires.toUTCString():'',c.path?'; path='+c.path:'',c.domain?'; domain='+c.domain:'',c.secure?'; secure':''].join(''))}var e=a?undefined:{},cookies=document.cookie?document.cookie.split('; '):[],i=0,l=cookies.length;for(;i<l;i++){var f=cookies[i].split('='),name=decode(f.shift()),cookie=f.join('=');if(a===name){e=read(cookie,b);break}if(!a&&(cookie=read(cookie))!==undefined){e[name]=cookie}}return e};h.defaults={};$.removeCookie=function(a,b){$.cookie(a,'',$.extend({},b,{expires:-1}));return!$.cookie(a)}}))}
            
            /**********************
            * Begin dataLayer Build 
            ***********************/
            
            /**
            * DEBUG
            * Set to true or false to display messages to the console
            */
            if(__DL__.debug){
                console.log('=====================\n| DATALAYER SHOPIFY |\n---------------------');
                console.log('Page Template: {{ template }}');
            }
            
            window.dataLayer = window.dataLayer || [];  // init data layer if doesn't already exist
            dataLayer.push({'event': 'Begin DataLayer'}); // begin datalayer
            
            var template = "{{template}}"; 
            
            /**
            * Landing Page Cookie
            * 1. Detect if user just landed on the site
            * 2. Only fires if Page Title matches website */
            
            $.cookie.raw = true;
            if ($.cookie('landingPage') === undefined || $.cookie('landingPage').length === 0) {
                var landingPage = true;
                $.cookie('landingPage', unescape);
                $.removeCookie('landingPage', {path: '/'});
                $.cookie('landingPage', 'landed', {path: '/'});
            } else {
                var landingPage = false;
                $.cookie('landingPage', unescape);
                $.removeCookie('landingPage', {path: '/'});
                $.cookie('landingPage', 'refresh', {path: '/'});
            }
            if (__DL__.debug) {
                console.log('Landing Page: ' + landingPage);
            }
            
            /** 
            * Log State Cookie */
            
            {% if customer %}
            var isLoggedIn = true;
            {% else %}
            var isLoggedIn = false;
            {% endif %}
            if (!isLoggedIn) {
                $.cookie('logState', unescape);
                $.removeCookie('logState', {path: '/'});
                $.cookie('logState', 'loggedOut', {path: '/'});
            } else {
                if ($.cookie('logState') === 'loggedOut' || $.cookie('logState') === undefined) {
                    $.cookie('logState', unescape);
                    $.removeCookie('logState', {path: '/'});
                    $.cookie('logState', 'firstLog', {path: '/'});
                } else if ($.cookie('logState') === 'firstLog') {
                    $.cookie('logState', unescape);
                    $.removeCookie('logState', {path: '/'});
                    $.cookie('logState', 'refresh', {path: '/'});
                }
            }
            
            if ($.cookie('logState') === 'firstLog') {
                var firstLog = true;
            } else {
                var firstLog = false;
            }
            
            /**********************
            * DATALAYER SECTIONS 
            ***********************/
            
            /** 
            * DATALAYER: Log State
            * 1. Determine if user is logged in or not.
            * 2. Return User specific data. */
            
            var logState = {
                {% if shop.customer_accounts_enabled %}
                {% if customer %}
                'userId'        : {{customer.id | json}},
                'customerEmail' : {{customer.email | json}},
                'logState'      : "Logged In",
                'customerInfo'  : {
                    'firstName'   : {{customer_address.first_name | json}},
                    'lastName'    : {{customer_address.last_name | json}},
                    'address1'    : {{customer_address.address1 | json}},
                    'address2'    : {{customer_address.address2 | json}},
                    'street'      : {{customer_address.street | json}},
                    'city'        : {{customer_address.city | json}},
                    'province'    : {{customer_address.province | json}},
                    'zip'         : {{customer_address.zip | json}},
                    'country'     : {{customer_address.country | json}},
                    'phone'       : {{customer_address.phone | json}},
                    'totalOrders' : {{customer.orders_count | json}},
                    'totalSpent'  : {{customer.total_spent | money_without_currency | replace: ",", "." | json}}
                },
                {% else %}
                'logState' : "Logged Out",
                {% endif %}
                {% endif %}
                'firstLog'      : firstLog,
                'customerEmail' : {{customer.email | json}},
                'timestamp'     : Date.now(),  
                {% if customer.orders_count > 2 %}
                'customerType'       : 'Returning',
                'customerTypeNumber' : '0',
                {% else %}
                'customerType'       : 'New',
                'customerTypeNumber' :'1', 
                {% endif %}
                'shippingInfo' : {
                    'fullName'  : {{checkout.shipping_address.name | json}},
                    'firstName' : {{checkout.shipping_address.first_name | json}},
                    'lastName'  : {{checkout.shipping_address.last_name | json}},
                    'address1'  : {{checkout.shipping_address.address1 | json}},
                    'address2'  : {{checkout.shipping_address.address2 | json}},
                    'street'    : {{checkout.shipping_address.street | json}},
                    'city'      : {{checkout.shipping_address.city | json}},
                    'province'  : {{checkout.shipping_address.province | json}},
                    'zip'       : {{checkout.shipping_address.zip | json}},
                    'country'   : {{checkout.shipping_address.country | json}},
                    'phone'     : {{checkout.shipping_address.phone | json}},
                },
                'billingInfo' : {
                    'fullName'  : {{checkout.billing_address.name | json}},
                    'firstName' : {{checkout.billing_address.first_name | json}},
                    'lastName'  : {{checkout.billing_address.last_name | json}},
                    'address1'  : {{checkout.billing_address.address1 | json}},
                    'address2'  : {{checkout.billing_address.address2 | json}},
                    'street'    : {{checkout.billing_address.street | json}},
                    'city'      : {{checkout.billing_address.city | json}},
                    'province'  : {{checkout.billing_address.province | json}},
                    'zip'       : {{checkout.billing_address.zip | json}},
                    'country'   : {{checkout.billing_address.country | json}},
                    'phone'     : {{checkout.billing_address.phone | json}},
                },
                'checkoutEmail' : {{checkout.email | json}},
                'currency'      : {{order.currency | json}},
                'pageType'      : 'Log State',
                'event'         : 'Log State'
            }
            
            dataLayer.push(logState);
            if(__DL__.debug){
                console.log("Log State"+" :"+JSON.stringify(logState, null, " "));
            }
            
            /** 
            * DATALAYER: Homepage */
            
            if(document.location.pathname == "/"){
                var homepage = {
                    'pageType' : 'Homepage',
                    'event'    : 'Homepage'
                };
                dataLayer.push(homepage);
                if(__DL__.debug){
                    console.log("Homepage"+" :"+JSON.stringify(homepage, null, " "));
                }
            }
                       
                    /** 
                    * DATALAYER Variable
                    * Checkout & Transaction Data */
                    
                    __DL__products = [];
                    
                    {% for line_item in checkout.line_items %}
                    
                    __DL__products.push({
                        'id'          : {{line_item.product_id | json}},
                        'sku'         : {{line_item.sku | json}},
                        'variantId'   : {{line_item.variant_id | json}},
                        'name'        : {{line_item.title | json}},
                        'productType' : {{line_item.product.type | json}},
                        'price'       : {{line_item.price | money_without_currency | replace: ",", "." | json}},
                        'quantity'    : {{line_item.quantity | json}},
                        'description' : {{line_item.product.description | strip_newlines | strip_html  | json }},
                        'imageURL'    : "https:{{line_item.product.featured_image.src|img_url:'grande'}}", 
                        'productURL'  : '{{shop.secure_url}}{{line_item.product.url}}'
                    });
                    
                    {% endfor %}
                    transactionData = {
                        'transactionNumber'      : {{checkout.order_id | json}},
                        'transactionId'          : {{checkout.order_number | json}},
                        'transactionAffiliation' : {{shop.name | json}},
                        'transactionTotal'       : {{checkout.total_price | money_without_currency| replace: ",", "." | json}},
                        'transactionTax'         : {{checkout.tax_price | money_without_currency| replace: ",", "." | json}},
                        'transactionShipping'    : {{checkout.shipping_price | money_without_currency| replace: ",", "." | json}},
                        'transactionSubtotal'    : {{checkout.subtotal_price | money_without_currency| replace: ",", "." | json}},
                        {% for discount in checkout.discounts %}
                        'promoCode' : {{discount.code | json}},
                        'discount'  : {{discount.amoun t | money_without_currency | json}},
                        {% endfor %}
                        
                        'products': __DL__products
                    };
                    
                    if(__DL__.debug == true){
                        
                        /** DATALAYER: Transaction */
                        if(document.location.pathname.match(/.*order.*/g)){
                            dataLayer.push(transactionData,{
                                'pageType' :'Transaction',
                                'event'    :'Transaction'
                            });       
                            console.log("Transaction Data"+" :"+JSON.stringify(transactionData, null, " "));
                        }
                    }
                    
                    /** DATALAYER: Checkout */
                    if(Shopify.Checkout){
                        if(Shopify.Checkout.step){ 
                            if(Shopify.Checkout.step.length > 0){
                                if (Shopify.Checkout.step === 'contact_information'){
                                    dataLayer.push(transactionData,{
                                        'event'    :'Customer Information',
                                        'pageType' :'Customer Information'});
                                        console.log("Customer Information - Transaction Data"+" :"+JSON.stringify(transactionData, null, " "));
                                    }else if (Shopify.Checkout.step === 'shipping_method'){
                                        dataLayer.push(transactionData,{
                                            'event'    :'Shipping Information',
                                            'pageType' :'Shipping Information'});
                                            console.log("Shipping - Transaction Data"+" :"+JSON.stringify(transactionData, null, " "));
                                        }else if( Shopify.Checkout.step === "payment_method" ){
                                            dataLayer.push(transactionData,{
                                                'event'    :'Add Payment Info',
                                                'pageType' :'Add Payment Info'});
                                                console.log("Payment - Transaction Data"+" :"+JSON.stringify(transactionData, null, " "));
                                            }
                                        }
                                        
                                        if(__DL__.debug == true){
                                            /** DATALAYER: Transaction */
                                            if(Shopify.Checkout.page == "thank_you"){
                                                dataLayer.push(transactionData,{
                                                    'pageType' :'Transaction',
                                                    'event'    :'Transaction'
                                                });       
                                                console.log("Transaction Data"+" :"+JSON.stringify(transactionData, null, " "));  
                                            }
                                        }else{
                                            /** DATALAYER: Transaction */
                                            if(Shopify.Checkout.page == "thank_you"){
                                                dataLayer.push(transactionData,{
                                                    'pageType' :'Transaction',
                                                    'event'    :'Transaction'
                                                });
                                            }
                                        }
                                    }
                                }
                                
                                /** DATALAYER: All Pages
                                * Fire all pages trigger after all additional dataLayers have loaded. */
                                
                                dataLayer.push({
                                    'event': 'DataLayer Loaded'
                                });
                                
                                console.log('DATALAYER: DataLayer Loaded.');
                                
      
                            </script>
